{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){console.log(\" does this place getting called \",process.env.NODE_ENV);if(process.env.NODE_ENV==='development'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){// const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\nvar swUrl=\"\".concat(process.env.PUBLIC_URL,\"/custom-sw.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://cra.link/PWA');// const options = {\n//   userVisibleOnly: true,\n//   applicationServerKey: applicationServerKey\n// }\n// ServiceWorkerRegistration.pushManager.subscribe(options)\n});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){console.log(\"registration is under progress\");registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://cra.link/PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){console.log(\"No service worker file found\");// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}","map":{"version":3,"sources":["/home/akila/Desktop/Caffeine_Confessions_SPE_Final_Project/frontend/src/serviceWorkerRegistration.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","console","log","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  console.log(\" does this place getting called \",process.env.NODE_ENV);\n  if (process.env.NODE_ENV === 'development' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      // const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      const swUrl = `${process.env.PUBLIC_URL}/custom-sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n          // const options = {\n          //   userVisibleOnly: true,\n          //   applicationServerKey: applicationServerKey\n          // }\n          // ServiceWorkerRegistration.pushManager.subscribe(options)\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      console.log(\"registration is under progress\")\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        console.log(\"No service worker file found\");\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}